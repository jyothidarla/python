Slice operator:
==============
Python supports slice operator.The main objective of slice operator is
the make the pieces of the string as per the application reqn.Slice operator
is applicable for both direction  + and - direction.Following is the
syntax for slice operator

str1[begin:end(end-1):step]


Slice operator with positive direction:
========================================

Form_1:
======
str1[begin:]

Here end(end-1) and step is optional.The output of the string would be
from given position to till end of the string.

str1[5:]


Ex1:
===
import time 
str1="Core Python"
print(str1)
print()
print(type(str1))
print()
print("====SLICE OPERATOR USING + DIRECTION=====")
print()
print("===Form_1====")
print(str1[5:])
print("========================")
print()
time.sleep(2)
print("End of an application")


Ex2:
===
import time 
str1="Core Python"
print(str1)
print()
print(type(str1))
print()
print("====SLICE OPERATOR USING + DIRECTION=====")
print()
print("===Form_1====")
print(str1[9:])
print("========================")
print()
time.sleep(2)
print("End of an application")



Ex3:
===
import time 
str1="Core Python"
print(str1)
print()
print(type(str1))
print()
print("====SLICE OPERATOR USING + DIRECTION=====")
print()
print("===Form_1====")
print(str1[0:])
print("========================")
print()
time.sleep(2)
print("End of an application")


Ex4:
===
import time 
str1="Core Python"
print(str1)
print()
print(type(str1))
print()
print("====SLICE OPERATOR USING + DIRECTION=====")
print()
print("===Form_1====")
print(str1[12:])
print("========================")
print()
time.sleep(2)
print("End of an application")



Form_2:
======
str1[:end(end-1)]

Here begin and step is optional.The output of the string would be
from indexing position(0) to till end-1th position

str1[:9]---->9-1=8

Ex1:
===
import time 
str1="Core Python"
print(str1)
print()
print(type(str1))
print()
print("====SLICE OPERATOR USING + DIRECTION=====")
print()
print("===Form_2====")
print(str1[:9])
print("========================")
print()
time.sleep(2)
print("End of an application")


Ex2:
===
import time 
str1="Core Python"
print(str1)
print()
print(type(str1))
print()
print("====SLICE OPERATOR USING + DIRECTION=====")
print()
print("===Form_2====")
print(str1[:4])
print("========================")
print()
time.sleep(2)
print("End of an application")


Ex3:
===
import time 
str1="Core Python"
print(str1)
print()
print(type(str1))
print()
print("====SLICE OPERATOR USING + DIRECTION=====")
print()
print("===Form_2====")
print(str1[:11])
print("========================")
print()
time.sleep(2)
print("End of an application")


Ex4:
===
import time 
str1="Core Python"
print(str1)
print()
print(type(str1))
print()
print("====SLICE OPERATOR USING + DIRECTION=====")
print()
print("===Form_2====")
print(str1[:100])
print("========================")
print()
time.sleep(2)
print("End of an application")


Ex5:
===
import time 
str1="Core Python"
print(str1)
print()
print(type(str1))
print()
print("====SLICE OPERATOR USING + DIRECTION=====")
print()
print("===Form_2====")
print(str1[:-12])
print("========================")
print()
time.sleep(2)
print("End of an application")


Form_3:
======
str1[begin:end(end-1)]

Here step is optional.The output of the string would from given position to
till end-1 th position

str1[3:7]

Ex1:
===
import time 
str1="Core Python"
print(str1)
print()
print(type(str1))
print()
print("====SLICE OPERATOR USING + DIRECTION=====")
print()
print("===Form_3====")
print(str1[3:7])
print("========================")
print()
time.sleep(2)
print("End of an application")


Ex2:
===
import time 
str1="Core Python"
print(str1)
print()
print(type(str1))
print()
print("====SLICE OPERATOR USING + DIRECTION=====")
print()
print("===Form_3====")
print(str1[0:11])
print("========================")
print()
time.sleep(2)
print("End of an application")


Ex3:
===
import time 
str1="Core Python"
print(str1)
print()
print(type(str1))
print()
print("====SLICE OPERATOR USING + DIRECTION=====")
print()
print("===Form_3====")
print(str1[100:5])
print("========================")
print()
time.sleep(2)
print("End of an application")



Form_4:
=======
str1[begin:end(end-1):step]

Here the output of the string would displayed based on step value.

str1[0:11:1]


Ex1:
===
import time 
str1="Core Python"
print(str1)
print()
print(type(str1))
print()
print("====SLICE OPERATOR USING + DIRECTION=====")
print()
print("===Form_4====")
print(str1[0:11:1])
print("========================")
print()
time.sleep(2)
print("End of an application")


Ex2:
===
import time 
str1="Core Python"
print(str1)
print()
print(type(str1))
print()
print("====SLICE OPERATOR USING + DIRECTION=====")
print()
print("===Form_4====")
print(str1[0:11:2])
print("========================")
print()
time.sleep(2)
print("End of an application")


Ex3:
===
import time 
str1="Core Python"
print(str1)
print()
print(type(str1))
print()
print("====SLICE OPERATOR USING + DIRECTION=====")
print()
print("===Form_4====")
print(str1[0:10:4])
print("========================")
print()
time.sleep(2)
print("End of an application")

Ex4:
====
import time 
str1="Core Python"
print(str1)
print()
print(type(str1))
print()
print("====SLICE OPERATOR USING + DIRECTION=====")
print()
print("===Form_4====")
print(str1[0:11:9])
print("========================")
print()
time.sleep(2)
print("End of an application")



Ex5:
===
import time 
str1="Core Python"
print(str1)
print()
print(type(str1))
print()
print("====SLICE OPERATOR USING + DIRECTION=====")
print()
print("===Form_4====")
print(str1[0:6:0])
print("========================")
print()
time.sleep(2)
print("End of an application")


OUTPUT:
======
Core Python

<class 'str'>

====SLICE OPERATOR USING + DIRECTION=====

===Form_4====
Traceback (most recent call last):
  File "test1.py", line 10, in <module>
    print(str1[0:6:0])
ValueError: slice step cannot be zero


Ex6:
====
import time 
str1="Core Python"
print("My string object is in ascending order is:",str1[0:])
print()
print("My string object is in decending order is:",str1[::-1])
print()
time.sleep(2)
print("End of an application")







