Ternary operators:
==================
Uniary operator 
Binary operator
Ternary operator


Uniary operator:
===============
Uniary operator can be represent as if we are using one operator with
one variable(an identifier) then it is said to be uniary operator.


Ex1:
===
import time 
X1=True 
print("The value of X1 is:",X1)
print()
X2=not X1
print("The value of X2 is:",X2)
print()
time.sleep(2)
print('End of an application')


Binary operator:
===============
Binary operator can be represent as if we are using one operator with two
variable or operand then it is said to be Bnary operator.

Ex1:
===
import time
X1=1500 
X2=1700 
res1=X1+X2 
print("Addition is:",res1)
print()
time.sleep(2)
print('End of an application')


Ternary operator:
=================
Ternary operator can be represent as if we are using one or more than one
varibale with one or more than one condition then it is said to be ternary operator.

a=50
b=30 
max= a if a>b else b


Ex1:
===
import time 
a=eval(input('Enter the value of a:'))
b=eval(input('Enter the value of b:'))
max= a if a>b else b 
print("The max object is:",max)
print()
time.sleep(2)
print("ENd of an application")


Ex2:
===
import time 
a=eval(input('Enter the value of a:'))
b=eval(input('Enter the value of b:'))
min= a if a<b else b 
print("The max object is:",min)
print()
time.sleep(2)
print("ENd of an application")


Ex3:
===
import time 
a=eval(input('Enter the value of a:'))
b=eval(input('Enter the value of b:'))
c=eval(input('Enter the value of c:'))
max=a if a>b and a>c else b if b>c else c 
print('Max of three objects is:',max)
print()
time.sleep(2)
print("End of an application")


Ex3:
===
import time 
a=eval(input('Enter the value of a:'))
b=eval(input('Enter the value of b:'))
c=eval(input('Enter the value of c:'))
min=a if a<b and a<c else b if b<c else c 
print('Min object is:',min)
print()
time.sleep(2)
print("End of an application")


Chaining operators:
==================
Python supports chaining operator.The main objective of chaining operator
is to perform some operations as per the application reqn.While chaining operator
if one of the condition is false.complete result is false.Chaining operatot return 
boolean values either True or False based the condition


a=100
b=90
c=80
d=70
e=60 
res1=a>b>c>d>e --->True


Ex1:
===
import time 
a=int(input('Enter the value of a:'))
b=int(input('Enter the value of b:'))
c=int(input('Enter the value of c:'))
d=int(input('Enter the value of d:'))
e=int(input('Enter the value of e:'))
print()
print("=====Using chaining operators====")
res1=a>b>c>d>e 
print("The result_set is:",res1)
print()
time.sleep(2)
print("End of an application")


Ex2:
===
import time 
a=int(input('Enter the value of a:'))
b=int(input('Enter the value of b:'))
c=int(input('Enter the value of c:'))
d=int(input('Enter the value of d:'))
e=int(input('Enter the value of e:'))
print()
print("=====Using chaining operators====")
res1=a>b>c<d>e 
print("The result_set is:",res1)
print()
time.sleep(2)
print("End of an application")


Ex3:
===
import time 
a=int(input('Enter the value of a:'))
b=int(input('Enter the value of b:'))
c=int(input('Enter the value of c:'))
d=int(input('Enter the value of d:'))
e=int(input('Enter the value of e:'))
print()
print("=====Using chaining operators====")
res1=a==b==c==d==e 
print("The result_set is:",res1)
print()
time.sleep(2)
print("End of an application")


Ex4:
===
import time 
a=int(input('Enter the value of a:'))
b=int(input('Enter the value of b:'))
c=int(input('Enter the value of c:'))
d=int(input('Enter the value of d:'))
e=int(input('Enter the value of e:'))
print()
print("=====Using chaining operators====")
res1=a!=b!=c!=d!=e 
print("The result_set is:",res1)
print()
time.sleep(2)
print("End of an application")

Ex5:
===
import time 
a=int(input('Enter the value of a:'))
b=int(input('Enter the value of b:'))
c=int(input('Enter the value of c:'))
d=int(input('Enter the value of d:'))
print()
print("=====Using chaining operators====")
res1=a+b==c+d
print("The result_set is:",res1)
print()
time.sleep(2)
print("End of an application")


->Bitwise operators:
===================
Python supports bitwise operators.The main objective of bitwise operators is to perform
bit level operations.Following are the bitwise operators in 
python

->Bitwise and operator & 
->Bitwise or operator | 
->Bitwise exclusive or  ^ 
->Bitwise complement operator ~ 
->Bitwise left shift operator  <<
->Bitwise Right shift operator  >>


->Bitwise and operator & :
==========================
True --- 1
False --- 0 

S1    S2      S1&S2
--------------------
0     1         0
1     0         0
1     1         1
0     0         0
-------------------


->Bitwise or operator | 

S1    S2      S1|S2
--------------------
0     1         1
1     0         1
1     1         1
0     0         0
-------------------


->Bitwise exclusive or  ^ :
===========================


S1    S2      S1^S2
--------------------
0     1         1
1     0         1
1     1         0
0     0         0
-------------------


print(4&5)
print(4|5)
print(4^5)

4 ---Integer or decimal number---->binary number

Binary number is Python:
=======================
0B10101010
or
0b101010101

4   ---->   1     0   0
5  ----->   1     0   1   &  | ^
===================================
            1    0    0 ----->4
            1    0    1  ----> 5
            0    0    1 ----->1










